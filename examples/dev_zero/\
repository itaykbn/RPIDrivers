#include <linux/cdev.h>
#include <linux/init.h>
#include <linux/kernel.h>
#include <linux/module.h>

/*Declarations*/
ssize_t myzero_write(struct file *f, const char __user *buf, size_t sz,
                     loff_t *off);
/*Consts*/
static struct file_operations my_fops = {.owner = THIS_MODULE,
                                         .write = myzero_write};
/*Vars*/
struct cdev *my_cdev = NULL;
dev_t my_dev = 0;

static int __init myzero_init(void) {
  int err = 0;

  /*Allocate Major and Minor numbers*/
  err = alloc_chrdev_region()

      my_cdev = cdev_alloc();
  if (NULL == my_cdev) {
    err = -1;
    goto cleanup_nothing;
  }
  cdev_init(&my_cdev, &my_fops);
  err = cdev_add(cdev, );
  if (0 != err) {
    goto cleanup_cdev;
  }

cleanup_cdev:
  cdev_del(my_cdev);

cleanup_nothing:
  return err;
};

ssize_t myzero_write(struct file *f, const char __user *buf, size_t sz,
                     loff_t *off) {}

static void __exit myzero_exit(void) { cdev_del(my_cdev); }

// Ixit and init functions
module_init(myzero_init);
module_exit(myzero_exit);

// Module Definitions
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Kabangoose");
MODULE_DESCRIPTION("Own implemetation of dev zero");
MODULE_VERSION("1.0");
